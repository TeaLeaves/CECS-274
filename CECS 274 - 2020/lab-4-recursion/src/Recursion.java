/* * Name: Tina L Vu * Date: 02/19/20 *//**Three recursive problems. * Add your code to the three functions given below. * Do not change any part of the function headers (name, parameters, or return type). * Do not change any part of main. */public class Recursion {	public static void main( String[] args ) {		if( addDigits( 428 ) == 14 ) {			System.out.println( "addDigits1 is correct!" );		}		if( revFibonacci( 0, 1, 1, 5 ) == 5 ) {			System.out.println( "revFib1 is correct!" );		}			if( binToDec( "1101100" ) == 108 ) {			System.out.println( "binToDec1 is correct!" );		}		if( addDigits( 321 ) == 6 ) {			System.out.println( "addDigits2 is correct!" );		}		if( revFibonacci( 0, 1, 1, 10 ) == 55 ) {			System.out.println( "revFib2 is correct!" );		}			if( binToDec( "1011101" ) == 93 ) {			System.out.println( "binToDec2 is correct!" );		}	}	/**Finds the sum of the digits of num	 * @param num value to find the sum of	 * @return the sum of the digits	 */	public static int addDigits( int num ) {		//base case		if(num % 10 == 0) {			return num;			//work		} else{			//get the last value			int singleValue = num % 10;			//return: add the last value with the recursion			return (singleValue + addDigits(num/10));		}	}	/**Finds the nth Fibonacci value	 * @param f1 n-2 Fibonacci value	 * @param f2 n-1 Fibonacci value	 * @param c  counter	 * @param n  the number c should count up to	 * @return  the nth Fibonacci value  	 */	public static int revFibonacci( int f1, int f2, int c, int n ) {		//base case, until counter(c) reaches numbers of time recursion should repeat(n)		if( c == n){			return f2;		} else {			//save f2			int previousf2 = f2;			//get new f2			f2 = f1+f2;			//saved f2 is now f1			f1 = previousf2;			//repeat until c = n			return revFibonacci( f1, f2, c +1,n );		}	}	/**Converts a binary string to decimal	 * @param bin the binary string	 * @return the decimal value 	 */	public static int binToDec( String bin ) {		//base case		if( bin.length() == 0){			return 0;		} else{			//first digit: substring(bin.length()-1)			int firstDigit = Integer.parseInt( bin.substring(0,1) );			//power: bin.length()-1: the position of the digit			//recursion: binToDec( REST OF THE STRING )			//return (power*digit) + recursion			return ( (int) Math.pow( 2,(bin.length()-1) ) * firstDigit ) + binToDec(bin.substring(1));		}	}}